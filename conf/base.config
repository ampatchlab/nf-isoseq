process {

  errorStrategy = 'retry'
  maxRetries = 3

  cpus = { max_cpus( 1 * task.attempt ) }
  memory = { max_memory( 1.GB * task.attempt ) }
  time = { max_time( 1.h * task.attempt ) }

  withName: 'bax2bam' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 6.h * task.attempt ) }
  }

  withName: 'create_filtered_subreadsets' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 1.h * task.attempt ) }
  }

  withName: 'apply_subread_filters' {
    cpus = { max_cpus( 2 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 1.h * task.attempt ) }
  }

  withName: 'ccs' {
    cpus = { max_cpus( 8 ) }
    memory = { max_memory( 2.GB * task.attempt ) }
    time = { max_time( 6.h * task.attempt ) }
  }

  withName: 'lima' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 2.h * task.attempt ) }
  }

  withName: 'refine' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 2.h * task.attempt ) }
  }

  withName: 'create_transcriptsets' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 1.h * task.attempt ) }
  }

  withName: 'cluster' {
    cpus = { max_cpus( 8 ) }
    memory = { max_memory( 2.GB * task.attempt ) }
    time = { max_time( 6.h * task.attempt ) }
  }

  withName: 'create_subreadsets' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 1.h * task.attempt ) }
  }

  withName: 'polish' {
    cpus = { max_cpus( 8 ) }
    memory = { max_memory( 2.GB * task.attempt ) }
    time = { max_time( 6.h * task.attempt ) }
  }

  withName: 'minimap2' {
    cpus = { max_cpus( 3 ) }
    memory = { max_memory( 24.GB * task.attempt ) }
    time = { max_time( 6.h * task.attempt ) }
  }

  withName: 'samtools' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 1.h * task.attempt ) }
  }

  withName: 'junceval' {
    cpus = { max_cpus( 1 ) }
    memory = { max_memory( 1.GB * task.attempt ) }
    time = { max_time( 1.h * task.attempt ) }
  }
}

params {

  max_cpus = 8
  max_memory = 32.GB
  max_time = 48.h
}
