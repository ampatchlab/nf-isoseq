manifest {

  author = 'Stephen Kazakoff'
  homePage = 'https://github.com/ampatchlab/nf-isoseq'
  description = 'IsoSeq v3.1 RSII Nextflow pipeline'
  version = '1.0'
}

params {

  csv = null

  // Reference genome params
  genome = 'GRCh38'

  genomes {
    'GRCh38' {
      fasta = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/GRCh38.primary_assembly.genome.fa.gz'
      gtf   = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.primary_assembly.annotation.gtf.gz'
    }
    'GRCm38' {
      fasta = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M23/GRCm38.primary_assembly.genome.fa.gz'
      gtf   = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M23/gencode.vM23.primary_assembly.annotation.gtf.gz'
    }
  }

  // Sequencing primers
  primers = 'Clontech'

  primer_sets {
    'Clontech' {
      fasta = "${baseDir}/assets/Clontech.fa"
    }
    'NEB' {
      fasta = "${baseDir}/assets/NEB.fa"
    }
  }

  // Subread filtering
  skip_subread_filtering = false

  min_subread_quality = 0.75
  min_subread_length = 35

  // CCS calling params
  min_ccs_passes = 1

  // IsoSeq refine params
  require_polya = true

  // IsoSeq cluster params
  max_ccs_reads = 10

  // IsoSeq polish params
  rq_cutoff = 0.99
  max_subreads = 60

  // output params
  outdir = './results'

  // report params
  execution_report = './reports/execution_report.html'
  trace_report = './reports/trace_report.txt'
  timeline_report = './reports/timeline_report.html'
  flowchart = './reports/flowchart.png'

  // AWS Batch options
  aws_queue = false
  aws_region = false

  // standard options
  advanced = false
  help = false
  version = false
}

report {

  enabled = true
  file = params.execution_report
}

trace {

  enabled = true
  file = params.trace_report
}

timeline {

  enabled = true
  file = params.timeline_report
}

dag {

  enabled = true
  file = params.flowchart
}

includeConfig 'conf/base.config'

profiles {

  'awsbatch' {
    includeConfig 'conf/containers.config'
    includeConfig 'conf/awsbatch.config'
  }

  'conda' {
    includeConfig 'conf/conda.config'
  }

  'docker' {
    includeConfig 'conf/containers.config'
    docker.enabled = true
  }

  'singularity' {
    includeConfig 'conf/containers.config'
    singularity.enabled = true
  }

  // institute configs

  'qimrb' {
    includeConfig 'conf/qimrb.config'
  }

  // test configs

  'test_ci' {
     includeConfig 'tests/test_ci.config'
  }

  'Alzheimer_IsoSeq_2016' {
    includeConfig 'tests/Alzheimer_IsoSeq_2016.config'
  }
}

def max_cpus(cpus) {
    return cpus > params.max_cpus ? params.max_cpus : cpus
}

def max_memory(memory) {
    return memory > params.max_memory ? params.max_memory : memory
}

def max_time(time) {
    return time > params.max_time ? params.max_time : time
}
